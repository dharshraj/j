1)
graph = {
    'A': ['D', 'E'],
    'D': [],
    'E': ['B'],
    'B': []
}

visited = set()

def dfs(node):
    if node not in visited:
        print(node, end=' ')
        visited.add(node)
        for neighbor in graph[node]:
            dfs(neighbor)

print("DFS Traversal:")
dfs('A')


2)

import math

# Board structure
board = [
    ['O', 'X', 'O'],
    ['X', 'O', 'X'],
    [' ', ' ', ' ']
]

def is_winner(b, player):
    for row in b:
        if all(cell == player for cell in row):
            return True
    for col in range(3):
        if all(b[row][col] == player for row in range(3)):
            return True
    if all(b[i][i] == player for i in range(3)) or all(b[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_full(b):
    return all(cell != ' ' for row in b for cell in row)

def utility(b):
    if is_winner(b, 'O'):
        return 1
    elif is_winner(b, 'X'):
        return -1
    else:
        return 0

def minimax(b, is_max):
    if is_winner(b, 'O') or is_winner(b, 'X') or is_full(b):
        return utility(b), None

    best_score = -math.inf if is_max else math.inf
    best_move = None

    for i in range(3):
        for j in range(3):
            if b[i][j] == ' ':
                b[i][j] = 'O' if is_max else 'X'
                score, _ = minimax(b, not is_max)
                b[i][j] = ' '
                if is_max:
                    if score > best_score:
                        best_score = score
                        best_move = (i, j)
                else:
                    if score < best_score:
                        best_score = score
                        best_move = (i, j)
    return best_score, best_move

score, move = minimax(board, True)
print("Best Move for O (MAX):", move, "with score:", score)


3)

% Facts
first_name(tonyblair, tony).
first_name(georgebush, georgedubya).
second_name(tonyblair, blair).
second_name(georgebush, bush).

% Rule: full name matcher
full_name(First, Last, ID) :-
    first_name(ID, First),
    second_name(ID, Last).

% Example query:
% ?- full_name(tony, blair, Who).


4)
% Gender facts
female(sarah). female(rebekah). female(hagar_concubine).
female(milcah). female(bashemath). female(mahalath).
female(first_daughter). female(rachel). female(labans_wife).

male(terah). male(abraham). male(nahor).
male(haran). male(isaac). male(ishmael).
male(uz). male(kemuel).

% Sample rules
mother(X) :- female(X).
father(X) :- male(X).

% Example relationships (can be extended further)
parent(abraham, isaac).
parent(sarah, isaac).
parent(hagar_concubine, ishmael).
parent(abraham, ishmael).

% Queries:
% ?- parent(abraham, Child).
% ?- mother(sarah).
