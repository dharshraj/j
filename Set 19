1)
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier, plot_tree
import matplotlib.pyplot as plt

# Dataset
data = {
    'age': ['<=30', '<=30', '31...40', '>40', '>40', '>40', '31...40', '<=30', '<=30', '>40', '<=30', '31...40', '31...40', '>40'],
    'income': ['high', 'high', 'high', 'medium', 'low', 'low', 'low', 'medium', 'low', 'medium', 'medium', 'medium', 'high', 'medium'],
    'student': ['no', 'no', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes', 'yes', 'yes', 'yes', 'yes', 'no'],
    'credit_rating': ['fair', 'excellent', 'fair', 'fair', 'fair', 'excellent', 'excellent', 'fair', 'fair', 'fair', 'excellent', 'excellent', 'fair', 'excellent'],
    'buys_computer': ['no', 'no', 'yes', 'yes', 'yes', 'no', 'yes', 'no', 'yes', 'yes', 'yes', 'yes', 'yes', 'no']
}

df = pd.DataFrame(data)

# Encoding
le = LabelEncoder()
for column in df.columns:
    df[column] = le.fit_transform(df[column])

# Features and target
X = df.drop('buys_computer', axis=1)
y = df['buys_computer']

# Decision Tree
model = DecisionTreeClassifier()
model.fit(X, y)

# Plot
plt.figure(figsize=(10, 6))
plot_tree(model, feature_names=X.columns, class_names=["No", "Yes"], filled=True)
plt.show()


2)

import numpy as np

# Activation function
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# Input data (XOR for illustration)
X = np.array([[0,0], [0,1], [1,0], [1,1]])
y = np.array([[0], [1], [1], [0]])

# Weights initialization
np.random.seed(1)
weights_input_hidden = np.random.rand(2, 2)
weights_hidden_output = np.random.rand(2, 1)

# Training
for epoch in range(10000):
    # Forward pass
    hidden_input = np.dot(X, weights_input_hidden)
    hidden_output = sigmoid(hidden_input)

    final_input = np.dot(hidden_output, weights_hidden_output)
    final_output = sigmoid(final_input)

    # Backpropagation
    error = y - final_output
    d_output = error * sigmoid_derivative(final_output)

    error_hidden = d_output.dot(weights_hidden_output.T)
    d_hidden = error_hidden * sigmoid_derivative(hidden_output)

    weights_hidden_output += hidden_output.T.dot(d_output)
    weights_input_hidden += X.T.dot(d_hidden)

print("Output after training:")
print(final_output)


3)
% Facts
not(studies(john)).
lucky(john).

% Rules
pass(X) :- studies(X).
pass(X) :- lucky(X).
wins_lottery(X) :- lucky(X).
happy(X) :- pass(X), wins_lottery(X).

% Query
% ?- happy(john).


4)
% Facts
man(socrates).
man(einstein).
man(alexander).

% Rule
mortal(X) :- man(X).

% Queries
% ?- mortal(socrates).
% ?- mortal(einstein).
% ?- mortal(alexander).


